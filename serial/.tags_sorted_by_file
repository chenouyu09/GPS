!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
closeGPRS	gprs.c	/^int closeGPRS(int fd)$/;"	f
doub2unico	gprs.c	/^void doub2unico(double db,char ch[])$/;"	f
gps_is_off	gprs.c	/^void gps_is_off(char ch[])$/;"	f
gps_is_on	gprs.c	/^void gps_is_on(char ch[])$/;"	f
int2unico	gprs.c	/^void int2unico(int num, char ch[])$/;"	f
jingdu	gprs.c	/^void jingdu(char c,int d,int f,double m,char ch[])$/;"	f
num_unicode	gprs.c	/^static const char *num_unicode[10]={$/;"	v	file:
openGPRS	gprs.c	/^int openGPRS(int fd)$/;"	f
receive_en_message	gprs.c	/^int receive_en_message(int fd)$/;"	f
s_f_m	gprs.c	/^void s_f_m(int s,int f,int m,char ch[])$/;"	f
send_at	gprs.c	/^void send_at(int fd)$/;"	f
send_at_cmgf	gprs.c	/^void send_at_cmgf(int fd,char *c)$/;"	f
send_at_cmgs	gprs.c	/^void send_at_cmgs(int fd,char *cmgs,char *message)$/;"	f
send_at_csca	gprs.c	/^void send_at_csca(int fd)$/;"	f
send_at_cscs_ucs2	gprs.c	/^void send_at_cscs_ucs2(int fd)$/;"	f
send_zh_message	gprs.c	/^int send_zh_message(int fd) $/;"	f
serial_init	gprs.c	/^int serial_init(int fd) $/;"	f
sudu	gprs.c	/^void sudu(double spe,char ch[])$/;"	f
weidu	gprs.c	/^void weidu(char c,int d,int f,double m,char ch[])$/;"	f
y_m_d	gprs.c	/^void y_m_d(int y,int m,int d,char ch[])$/;"	f
doub2unico	gprs2.c	/^void doub2unico(double db,unsigned char ch[])$/;"	f
gps_is_off	gprs2.c	/^void gps_is_off(char ch[])$/;"	f
gps_is_on	gprs2.c	/^void gps_is_on(char ch[])$/;"	f
int2unico	gprs2.c	/^void int2unico(int num,unsigned char ch[])$/;"	f
jingdu	gprs2.c	/^void jingdu(char c,int d,int f,double m,unsigned char ch[])$/;"	f
main	gprs2.c	/^int main() $/;"	f
num_unicode	gprs2.c	/^static const char *num_unicode[10]={$/;"	v	file:
receive_en_message	gprs2.c	/^int receive_en_message(int fd)$/;"	f
s_f_m	gprs2.c	/^void s_f_m(int s,int f,int m,unsigned char ch[])$/;"	f
send_at	gprs2.c	/^void send_at(int fd)$/;"	f
send_at_cmgf	gprs2.c	/^void send_at_cmgf(int fd,char *c)$/;"	f
send_at_cmgs	gprs2.c	/^void send_at_cmgs(int fd,char *cmgs,char *message)$/;"	f
send_at_csca	gprs2.c	/^void send_at_csca(int fd)$/;"	f
send_at_cscs_ucs2	gprs2.c	/^void send_at_cscs_ucs2(int fd)$/;"	f
send_zh_message	gprs2.c	/^int send_zh_message(int fd) $/;"	f
serial_init	gprs2.c	/^int serial_init(int fd) $/;"	f
sudu	gprs2.c	/^void sudu(double spe,unsigned char ch[])$/;"	f
weidu	gprs2.c	/^void weidu(char c,int d,int f,double m,unsigned char ch[])$/;"	f
y_m_d	gprs2.c	/^void y_m_d(int y,int m,int d,unsigned char ch[])$/;"	f
GPGGA_analysis	gps.c	/^int GPGGA_analysis(char *buf, struct gpgga_data *data)$/;"	f
GPGLL_analysis	gps.c	/^int GPGLL_analysis(char *buf, struct gpgll_data *data)$/;"	f
GPGSA_analysis	gps.c	/^int GPGSA_analysis(char *buf, struct gpgsa_data *data)$/;"	f
GPGSV_analysis	gps.c	/^int GPGSV_analysis(char *buf, struct gpgsv_data *data)$/;"	f
GPRMC_analysis	gps.c	/^int GPRMC_analysis(char *buf, struct gprmc_data *data)$/;"	f
GPTXT_analysis	gps.c	/^int GPTXT_analysis(char *buf, struct gptxt_data *data)$/;"	f
GPVTG_analysis	gps.c	/^int GPVTG_analysis(char *buf, struct gpvtg_data *data)$/;"	f
closeGPS	gps.c	/^int closeGPS(int fd)$/;"	f
getchecksum	gps.c	/^int getchecksum(char *command, char *c1, char *c2)$/;"	f
getposition	gps.c	/^void getposition()$/;"	f
getspeed	gps.c	/^void getspeed()$/;"	f
gettime	gps.c	/^void gettime()$/;"	f
gpgga	gps.c	/^struct gpgga_data gpgga;$/;"	v	typeref:struct:gpgga_data
gpgll	gps.c	/^struct gpgll_data gpgll;$/;"	v	typeref:struct:gpgll_data
gpgsa	gps.c	/^struct gpgsa_data gpgsa;$/;"	v	typeref:struct:gpgsa_data
gpgsv	gps.c	/^struct gpgsv_data gpgsv;$/;"	v	typeref:struct:gpgsv_data
gprmc	gps.c	/^struct gprmc_data gprmc;$/;"	v	typeref:struct:gprmc_data
gptxt	gps.c	/^struct gptxt_data gptxt;$/;"	v	typeref:struct:gptxt_data
gpvtg	gps.c	/^struct gpvtg_data gpvtg;$/;"	v	typeref:struct:gpvtg_data
openGPS	gps.c	/^int openGPS(char *dev)$/;"	f
printCommand	gps.c	/^int printCommand(void)$/;"	f
printData	gps.c	/^int printData(void)$/;"	f
printGPGGA	gps.c	/^int printGPGGA(void)$/;"	f
printGPGSA	gps.c	/^int printGPGSA(void)$/;"	f
printGPGSV	gps.c	/^int printGPGSV(void)$/;"	f
printGPRMC	gps.c	/^int printGPRMC(void)$/;"	f
readGPS	gps.c	/^int readGPS(int fd)$/;"	f
_GPS_H_	gps.h	2;"	d
altitude	gps.h	/^	double altitude;$/;"	m	struct:gpgga_data
az0	gps.h	/^	char az0[4];\/\/Azimuth, range 0..359$/;"	m	struct:gpgsv_data
az1	gps.h	/^	char az1[4];\/\/Azimuth, range 0..359$/;"	m	struct:gpgsv_data
az2	gps.h	/^	char az2[4];\/\/Azimuth, range 0..359$/;"	m	struct:gpgsv_data
az3	gps.h	/^	char az3[4];\/\/Azimuth, range 0..359$/;"	m	struct:gpgsv_data
cno0	gps.h	/^	char cno0[3];\/\/C\/N0, range 0..99, null when not tracking$/;"	m	struct:gpgsv_data
cno1	gps.h	/^	char cno1[3];\/\/C\/N0, range 0..99, null when not tracking$/;"	m	struct:gpgsv_data
cno2	gps.h	/^	char cno2[3];\/\/C\/N0, range 0..99, null when not tracking$/;"	m	struct:gpgsv_data
cno3	gps.h	/^	char cno3[3];\/\/C\/N0, range 0..99, null when not tracking$/;"	m	struct:gpgsv_data
cog	gps.h	/^	char cog[6];$/;"	m	struct:gprmc_data
command	gps.h	/^	char command[100];$/;"	m	struct:gpgga_data
command	gps.h	/^	char command[100];$/;"	m	struct:gpgll_data
command	gps.h	/^	char command[100];$/;"	m	struct:gpgsa_data
command	gps.h	/^	char command[100];$/;"	m	struct:gprmc_data
command	gps.h	/^	char command[100];$/;"	m	struct:gptxt_data
command	gps.h	/^	char command[100];$/;"	m	struct:gpvtg_data
command0	gps.h	/^	char command0[100];$/;"	m	struct:gpgsv_data
command1	gps.h	/^	char command1[100];$/;"	m	struct:gpgsv_data
command2	gps.h	/^	char command2[100];$/;"	m	struct:gpgsv_data
command3	gps.h	/^	char command3[100];$/;"	m	struct:gpgsv_data
command4	gps.h	/^	char command4[100];$/;"	m	struct:gpgsv_data
cs	gps.h	/^	char cs[3];$/;"	m	struct:gpgga_data
cs	gps.h	/^	char cs[3];$/;"	m	struct:gpgll_data
cs	gps.h	/^	char cs[3];$/;"	m	struct:gptxt_data
cs	gps.h	/^	char cs[3];$/;"	m	struct:gpvtg_data
cs	gps.h	/^	char cs[3];\/\/Checksum$/;"	m	struct:gpgsv_data
cs	gps.h	/^	char cs[3];\/\/checksum$/;"	m	struct:gpgsa_data
cs	gps.h	/^	char cs[4];$/;"	m	struct:gprmc_data
date	gps.h	/^	char date[7];$/;"	m	struct:gprmc_data
day	gps.h	/^	int day;$/;"	m	struct:gprmc_data
e	gps.h	/^	char e;$/;"	m	struct:gprmc_data
elv0	gps.h	/^	char elv0[3];\/\/Elevation, range 0..90$/;"	m	struct:gpgsv_data
elv1	gps.h	/^	char elv1[3];\/\/Elevation, range 0..90$/;"	m	struct:gpgsv_data
elv2	gps.h	/^	char elv2[3];\/\/Elevation, range 0..90$/;"	m	struct:gpgsv_data
elv3	gps.h	/^	char elv3[3];\/\/Elevation, range 0..90$/;"	m	struct:gpgsv_data
fs	gps.h	/^	char fs;\/\/fix status$/;"	m	struct:gpgsa_data
gpgga_data	gps.h	/^struct gpgga_data$/;"	s
gpgll_data	gps.h	/^struct gpgll_data$/;"	s
gpgsa_data	gps.h	/^struct gpgsa_data$/;"	s
gpgsv_data	gps.h	/^struct gpgsv_data$/;"	s
gprmc_data	gps.h	/^struct gprmc_data$/;"	s
gptxt_data	gps.h	/^struct gptxt_data$/;"	s
gpvtg_data	gps.h	/^struct gpvtg_data$/;"	s
h	gps.h	/^	double h;$/;"	m	struct:gpgsa_data
hdop	gps.h	/^	char hdop[6];$/;"	m	struct:gpgsa_data
hour	gps.h	/^	int hour;$/;"	m	struct:gprmc_data
id	gps.h	/^	int id[14];$/;"	m	struct:gpgsa_data
id	gps.h	/^	int id[50];\/\/卫星编号$/;"	m	struct:gpgsv_data
kmph	gps.h	/^	double kmph;$/;"	m	struct:gprmc_data
lati_degree	gps.h	/^	int lati_degree;$/;"	m	struct:gprmc_data
lati_minute	gps.h	/^	int lati_minute;$/;"	m	struct:gprmc_data
lati_second	gps.h	/^	double lati_second;$/;"	m	struct:gprmc_data
latitude	gps.h	/^	char latitude[11];$/;"	m	struct:gprmc_data
long_degree	gps.h	/^	int long_degree;$/;"	m	struct:gprmc_data
long_minute	gps.h	/^	int long_minute;$/;"	m	struct:gprmc_data
long_second	gps.h	/^	double long_second;$/;"	m	struct:gprmc_data
longitude	gps.h	/^	char longitude[12];$/;"	m	struct:gprmc_data
minute	gps.h	/^	int minute;$/;"	m	struct:gprmc_data
mode	gps.h	/^	char mode;$/;"	m	struct:gprmc_data
month	gps.h	/^	int month;$/;"	m	struct:gprmc_data
msgno	gps.h	/^	char msgno;\/\/Number of this message$/;"	m	struct:gpgsv_data
msl	gps.h	/^	char msl[10];$/;"	m	struct:gpgga_data
n	gps.h	/^	char n;$/;"	m	struct:gprmc_data
no	gps.h	/^	int no;\/\/可见卫星数目$/;"	m	struct:gpgsv_data
nomsg	gps.h	/^	char nomsg;\/\/Number of messages$/;"	m	struct:gpgsv_data
nosv	gps.h	/^	char nosv[3];$/;"	m	struct:gpgga_data
nosv	gps.h	/^	char nosv[3];\/\/Satellites in View$/;"	m	struct:gpgsv_data
number	gps.h	/^	int number;$/;"	m	struct:gpgga_data
p	gps.h	/^	double p;$/;"	m	struct:gpgsa_data
pdop	gps.h	/^	char pdop[6];$/;"	m	struct:gpgsa_data
second	gps.h	/^	int second;$/;"	m	struct:gprmc_data
smode	gps.h	/^	char smode;\/\/smode$/;"	m	struct:gpgsa_data
spd	gps.h	/^	char spd[6];$/;"	m	struct:gprmc_data
status	gps.h	/^	char status;$/;"	m	struct:gprmc_data
sv	gps.h	/^	char sv[30];\/\/satellite number$/;"	m	struct:gpgsa_data
sv0	gps.h	/^	char sv0[3];\/\/Satellite ID$/;"	m	struct:gpgsv_data
sv1	gps.h	/^	char sv1[3];\/\/Satellite ID$/;"	m	struct:gpgsv_data
sv2	gps.h	/^	char sv2[3];\/\/Satellite ID$/;"	m	struct:gpgsv_data
sv3	gps.h	/^	char sv3[3];\/\/Satellite ID$/;"	m	struct:gpgsv_data
utc	gps.h	/^	char utc[10];$/;"	m	struct:gprmc_data
v	gps.h	/^	double v;$/;"	m	struct:gpgsa_data
vdop	gps.h	/^	char vdop[6];$/;"	m	struct:gpgsa_data
year	gps.h	/^	int year;$/;"	m	struct:gprmc_data
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
cfg	serial.c	/^int cfg(int fd, const char *buf)$/;"	f
cfg_ack_check	serial.c	/^u_int8_t cfg_ack_check(int fd)$/;"	f
cfg_cfg_save	serial.c	/^const char cfg_cfg_save[] =     {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1E, 0xAC};$/;"	v
cfg_msg_GPGGA_off	serial.c	/^const char cfg_msg_GPGGA_off[]= {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};$/;"	v
cfg_msg_GPGGA_on	serial.c	/^const char cfg_msg_GPGGA_on[]=  {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28};$/;"	v
cfg_msg_GPGLL_off	serial.c	/^const char cfg_msg_GPGLL_off[]= {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};$/;"	v
cfg_msg_GPGLL_on	serial.c	/^const char cfg_msg_GPGLL_on[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2F};$/;"	v
cfg_msg_GPVTG_off	serial.c	/^const char cfg_msg_GPVTG_off[]= {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};$/;"	v
cfg_msg_GPVTG_on	serial.c	/^const char cfg_msg_GPVTG_on[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x4B};$/;"	v
cfg_rate_1000	serial.c	/^const char cfg_rate_1000[]    = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xE8, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x39};$/;"	v
cfg_rate_10000	serial.c	/^const char cfg_rate_10000[]   = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x10, 0x27, 0x01, 0x00, 0x01, 0x00, 0x4D, 0xDD};$/;"	v
cfg_rate_200	serial.c	/^const char cfg_rate_200[]     = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};$/;"	v
cfg_rate_2000	serial.c	/^const char cfg_rate_2000[]    = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xD0, 0x07, 0x01, 0x00, 0x01, 0x00, 0xED, 0xBD};$/;"	v
cfg_rate_500	serial.c	/^const char cfg_rate_500[]     = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xF4, 0x01, 0x01, 0x00, 0x01, 0x00, 0x0B, 0x77};$/;"	v
cfg_rst_cs_start	serial.c	/^const char cfg_rst_cs_start[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x07, 0x09, 0x00, 0x1D, 0x87};$/;"	v
cfg_rst_cs_stop	serial.c	/^const char cfg_rst_cs_stop[]  = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x07, 0x08, 0x00, 0x1C, 0x85};$/;"	v
cfg_rst_cs_wd	serial.c	/^const char cfg_rst_cs_wd[]    = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x14, 0x75};$/;"	v
cfg_rst_prt_38400	serial.c	/^const char cfg_rst_prt_38400[] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x70};$/;"	v
cfg_rst_prt_9600	serial.c	/^const char cfg_rst_prt_9600[]  = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x95};$/;"	v
close_serial	serial.c	/^int close_serial(int fd)$/;"	f
init_serial	serial.c	/^int init_serial(int fd, int prt)$/;"	f
open_serial	serial.c	/^int open_serial(char *dev)$/;"	f
read_serial	serial.c	/^int read_serial(int fd, char *buf)$/;"	f
rxd_buf	serial.c	/^char rxd_buf[512];\/\/接收缓冲区$/;"	v
_SERIAL_H_	serial.h	2;"	d
arm1	test.c	1;"	d	file:
main	test.c	/^int main()$/;"	f
main	test.c	/^int main(int argc, char const *argv[])$/;"	f
